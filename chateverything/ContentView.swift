//
//  ContentView.swift
//  chateverything
//
//  Created by litao on 2025/2/5.
//

import SwiftUI
import AVFoundation
import Speech
import Foundation
import LLM

// ËÅäÂ§©‰ºöËØùÊ®°Âûã
struct ChatSession: Identifiable {
    let id = UUID()
    let name: String
    let avatar: String
    let lastMessage: String
    let lastMessageTime: Date
    var unreadCount: Int
}

// Âú® ChatSession struct ÂêéÊ∑ªÂä†‰ª•‰∏ãÊ®°Âûã
struct Season: Codable, Identifiable {
    let id: String
    let name: String
    let cover: String
    
    enum CodingKeys: String, CodingKey {
        case id
        case name
        case cover = "poster_path"
    }
}
struct ListResponseWithCursor<T: Codable>: Codable {
    let list: [T]
    let marker: String
    let pageSize: Int
    let total: Int
    enum CodingKeys: String, CodingKey {
        case list
        case marker = "next_marker"
        case pageSize = "page_size"
        case total
    }
}

struct BizResponse<T: Codable>: Codable {
    let code: Int
    let msg: String
    let data: T
}

struct FetchParams: Codable {
    let page: Int
    let pageSize: Int
    let name: String

    enum CodingKeys: String, CodingKey {
        case page
        case pageSize = "page_size"
        case name
    }
}

struct ContentView: View {
    @State private var chatSessions: [ChatSession] = [
        ChatSession(name: "Âº†‰∏â", avatar: "person.circle.fill", lastMessage: "‰ªäÂ§©Â§©Ê∞îÁúü‰∏çÈîô", lastMessageTime: Date(), unreadCount: 2),
        ChatSession(name: "ÊùéÂõõ", avatar: "person.circle.fill", lastMessage: "‰∏ãÁè≠‰∏ÄËµ∑ÂêÉÈ•≠ÂêóÔºü", lastMessageTime: Date(), unreadCount: 0),
        ChatSession(name: "Áéã‰∫î", avatar: "person.circle.fill", lastMessage: "È°πÁõÆËøõÂ±ïÂ¶Ç‰ΩïÔºü", lastMessageTime: Date(), unreadCount: 1)
    ]
    
    @State private var seasons: [Season] = []
    @State private var selectedTab = 0  // Ê∑ªÂä†Áä∂ÊÄÅÂèòÈáèÊù•Ë∑üË∏™ÈÄâ‰∏≠ÁöÑÊ†áÁ≠æÈ°µ
    
    @StateObject private var navigationManager = NavigationStateManager()
    
    @State private var showingChatConfig = false
    
    func loadSeasons() {
        let hostname = "https://media.funzm.com"
        let endpoint = "/api/v2/wechat/season/list"
        let token = "eyJhbGciOiJkaXIiLCJlbmMiOiJBMjU2R0NNIn0..hygHZsl86_hlWWsa.BRdG-tcb2YWwx3O9GSpD9AoEnyWi-NVMBVVlrU7rAsOA-pgc3MsbJeiym-h51yZiHCJznyewuW0dDnKyxypgPFDEnX2M20sotUbLEyapUBISA2YRQt0.ZFIfKHxLJpNBALOuXFU6PQ"
        
        let params = FetchParams(page: 1, pageSize: 20, name: "")
        
        guard let url = URL(string: hostname + endpoint) else { return }
        
        var request = URLRequest(url: url)
        request.httpMethod = "POST"
        request.setValue("application/json", forHTTPHeaderField: "Content-Type")
        request.setValue(token, forHTTPHeaderField: "Authorization")
        request.setValue("2.3.0", forHTTPHeaderField: "client-version")
        
        do {
            request.httpBody = try JSONEncoder().encode(params)
        } catch {
            print("Error encoding params: \(error)")
            return
        }
        
        URLSession.shared.dataTask(with: request) { data, response, error in
            if let error = error {
                print("Error: \(error)")
                return
            }
            
            guard let data = data else {
                print("No data received")
                return
            }
        //    dump(data) 
        //    dump(response)
        if let jsonString = String(data: data, encoding: .utf8) {
    print("Êî∂Âà∞ÁöÑ JSON Êï∞ÊçÆÔºö")
    print(jsonString)
}
            do {
                let response = try JSONDecoder().decode(BizResponse<ListResponseWithCursor<Season>>.self, from: data)
                dump(response)
                DispatchQueue.main.async {
                    self.seasons = response.data.list
                }
            } catch {
                print("Error decoding response: \(error)")
            }
        }.resume()
    }
    
    var body: some View {
        TabView(selection: $selectedTab) {
            // ËÅäÂ§©Ê†áÁ≠æÈ°µ
            NavigationStack(path: $navigationManager.path) {
                VStack(spacing: 0) {
                    // ÂéüÊúâÁöÑ List ËßÜÂõæ
                    List(chatSessions) { session in
                        NavigationLink {
let prompt = "You are an IELTS speaking examiner. Conduct a simulated IELTS speaking test by asking questions one at a time. After receiving each response with pronunciation scores from speech recognition, evaluate the answer and proceed to the next question. Do not ask multiple questions at once. After all sections are completed, provide a comprehensive evaluation and an estimated IELTS speaking band score. Begin with the first question.";
// let prompt = "You are an speaking examiner.";
                            ChatDetailView(
                                chatSession: session,
                                // model: LLMService(model: LanguageModel(
                                //     providerName: "deepseek",
                                //     id: "deepseek-chat",
                                //     name: "deepseek-chat",
                                //     apiKey: "sk-292831353cda4d1c9f59984067f24379",
                                //     apiProxyAddress: "https://api.deepseek.com/chat/completions",
                                //     responseHandler: { data in
                                //         let decoder = JSONDecoder()
                                //         let response = try decoder.decode(DeepseekChatResponse.self, from: data)
                                //         return response.choices[0].message.content
                                //     }
                                // ), 
                                model: LLMService(model: LanguageModel(
                                    providerName: "doubao",
                                    id: "ep-20250205141518-nvl9p",
                                    name: "ep-20250205141518-nvl9p",
                                    apiKey: "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJhcmstY29uc29sZSIsImV4cCI6MTczOTk5MjgxMCwiaWF0IjoxNzM5OTU2ODEwLCJ0IjoidXNlciIsImt2IjoxLCJhaWQiOiIyMTAyMDM0ODI1IiwidWlkIjoiMCIsImlzX291dGVyX3VzZXIiOnRydWUsInJlc291cmNlX3R5cGUiOiJlbmRwb2ludCIsInJlc291cmNlX2lkcyI6WyJlcC0yMDI1MDIwNTE0MTUxOC1udmw5cCJdfQ.Z1GxZIt9zPUHfTEsHm9FctiECbO0SxGGuCF5ZIMWG7J1FMRyvWvK2qCWCXvR8yEHRpxKCEg-y_uVAuBklv90PchOlalJy_nvRidKrptzNJSjRVPFjZCKFd_cwEoqPv3NV-ltH3fc3HJCq0abuU6UR_gKY__Tl2qwcjUnr0tXjit71w9wQM6CQGB_49NvQdbq087ISZmC3yi0XSPVyN2b2F0WBp6lxZUCxdwbKtxVZc0N_SRcJQPNxrgsgjmFxqCjTADZggVT_2sCzqsax0rtGFR8PypiPhnMJyT1FutscqCo69RptOlfFlGect4ol_S9RBa1uyhSK3B_ixfVya8S1g",
                                    apiProxyAddress: "https://ark.cn-beijing.volces.com/api/v3/chat/completions",
                                    responseHandler: { data in
                                        let decoder = JSONDecoder()
                                        let response = try decoder.decode(DoubaoChatResponse.self, from: data)
                                        return response.choices[0].message.content
                                    }
                                ),
                                prompt: prompt)
                            )
                        } label: {
                            ChatRowView(chatSession: session)
                        }
                    }
                }
                .toolbar {
                    ToolbarItem(placement: .navigationBarTrailing) {
                        HStack {
                            Button(action: {
                                showingChatConfig = true
                            }) {
                                HStack {
                                    Text("ü§ñ")
                                        .font(.title2)
                                    Text("Êñ∞ÂØπËØù")
                                        .foregroundColor(.primary)
                                    Image(systemName: "chevron.down")
                                        .foregroundColor(.gray)
                                }
                                .padding(.horizontal, 12)
                                .padding(.vertical, 6)
                                .background(Color.gray.opacity(0.1))
                                .cornerRadius(20)
                            }
                            
                            Button(action: {}) {
                                Image(systemName: "plus.circle")
                            }
                        }
                    }
                }
                .sheet(isPresented: $showingChatConfig) {
                    ChatConfigView(isPresented: $showingChatConfig) { model, prompt in
                        let newSession = ChatSession(
                            name: "Êñ∞ÂØπËØù",
                            avatar: "person.circle.fill",
                            lastMessage: "ÂºÄÂßãÊñ∞ÂØπËØù",
                            lastMessageTime: Date(),
                            unreadCount: 0
                        )
                        chatSessions.insert(newSession, at: 0)
                        
                        let chatDetailView = ChatDetailView(
                            chatSession: newSession,
                            model: LLMService(model: model)
                        )
                        navigationManager.navigate(to: chatDetailView)
                    }
                }
                .navigationDestination(for: ChatDetailView.self) { view in
                    view
                }
            }
            .environmentObject(navigationManager)
            .tabItem {
                Image(systemName: "message.fill")
                Text("ËÅäÂ§©")
            }
            .tag(0)
            
            // Êé¢Á¥¢Ê†áÁ≠æÈ°µ
            NavigationStack {
                SearchView()
            }
            .tabItem {
                Image(systemName: "safari.fill")
                Text("Êé¢Á¥¢")
            }
            .tag(1)
            
            // ÂèëÁé∞Ê†áÁ≠æÈ°µ
            NavigationStack {
                DiscoverView()
            }
            .tabItem {
                Image(systemName: "sparkles")
                Text("ÂèëÁé∞")
            }
            .tag(2)
            
            // ÊàëÁöÑÊ†áÁ≠æÈ°µ
            NavigationStack {
               MineView()
            }
            .tabItem {
                Image(systemName: "person.fill")
                Text("ÊàëÁöÑ")
            }
            .tag(3)
        }
        .onAppear {
            // loadSeasons()
        }
        .toolbar(.visible, for: .tabBar)
        .toolbarBackground(.visible, for: .tabBar)
    }
}

// ËÅäÂ§©ÂàóË°®Ë°åËßÜÂõæ
struct ChatRowView: View {
    let chatSession: ChatSession
    
    var body: some View {
        HStack {
            Image(systemName: chatSession.avatar)
                .resizable()
                .frame(width: 50, height: 50)
                .clipShape(Circle())
            
            VStack(alignment: .leading, spacing: 5) {
                HStack {
                    Text(chatSession.name)
                        .font(.headline)
                    Spacer()
                    Text(formatDate(chatSession.lastMessageTime))
                        .font(.caption)
                        .foregroundColor(.gray)
                }
                
                HStack {
                    Text(chatSession.lastMessage)
                        .font(.subheadline)
                        .foregroundColor(.gray)
                        .lineLimit(1)
                    Spacer()
                    if chatSession.unreadCount > 0 {
                        Text("\(chatSession.unreadCount)")
                            .font(.caption)
                            .foregroundColor(.white)
                            .padding(6)
                            .background(Color.red)
                            .clipShape(Circle())
                    }
                }
            }
        }
        .padding(.vertical, 8)
    }
    
    private func formatDate(_ date: Date) -> String {
        let formatter = DateFormatter()
        formatter.dateFormat = "HH:mm"
        return formatter.string(from: date)
    }
}


// Ê∑ªÂä† String Êâ©Â±ïÊù•ÊîØÊåÅ‰øùÁïôÂàÜÈöîÁ¨¶ÁöÑÂàÜÂâ≤
extension String {
    func split(includesSeparators: Bool, 
              whereSeparator isSeparator: (Character) -> Bool) -> [Substring] {
        var result: [Substring] = []
        var start = self.startIndex
        
        for i in self.indices {
            if isSeparator(self[i]) {
                if i > start {
                    result.append(self[start..<i])
                }
                if includesSeparators {
                    result.append(self[i...i])
                }
                start = self.index(after: i)
            }
        }
        
        if start < self.endIndex {
            result.append(self[start..<self.endIndex])
        }
        
        return result
    }
}

// Á°Æ‰øù ChatDetailView Á¨¶Âêà Hashable ÂçèËÆÆ
extension ChatDetailView: Hashable {
    static func == (lhs: ChatDetailView, rhs: ChatDetailView) -> Bool {
        lhs.chatSession.id == rhs.chatSession.id
    }
    
    func hash(into hasher: inout Hasher) {
        hasher.combine(chatSession.id)
    }
}

#Preview {
    ContentView()
}
